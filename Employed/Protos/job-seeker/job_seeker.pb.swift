// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: protocol/job-seeker/job_seeker.proto
//
// For information on using the generated types, please see the documenation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct Employed_Io_JobSeeker {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var userID: String {
    get {return _storage._userID}
    set {_uniqueStorage()._userID = newValue}
  }

  var firstName: String {
    get {return _storage._firstName}
    set {_uniqueStorage()._firstName = newValue}
  }

  var lastName: String {
    get {return _storage._lastName}
    set {_uniqueStorage()._lastName = newValue}
  }

  var email: String {
    get {return _storage._email}
    set {_uniqueStorage()._email = newValue}
  }

  var phoneNumber: String {
    get {return _storage._phoneNumber}
    set {_uniqueStorage()._phoneNumber = newValue}
  }

  var bio: String {
    get {return _storage._bio}
    set {_uniqueStorage()._bio = newValue}
  }

  var avatarURL: String {
    get {return _storage._avatarURL}
    set {_uniqueStorage()._avatarURL = newValue}
  }

  var headline: String {
    get {return _storage._headline}
    set {_uniqueStorage()._headline = newValue}
  }

  var currentPosition: String {
    get {return _storage._currentPosition}
    set {_uniqueStorage()._currentPosition = newValue}
  }

  var industry: Employed_Io_Industry {
    get {return _storage._industry}
    set {_uniqueStorage()._industry = newValue}
  }

  var location: Employed_Io_Location {
    get {return _storage._location ?? Employed_Io_Location()}
    set {_uniqueStorage()._location = newValue}
  }
  /// Returns true if `location` has been explicitly set.
  var hasLocation: Bool {return _storage._location != nil}
  /// Clears the value of `location`. Subsequent reads from it will return its default value.
  mutating func clearLocation() {_uniqueStorage()._location = nil}

  var skills: [String] {
    get {return _storage._skills}
    set {_uniqueStorage()._skills = newValue}
  }

  var tags: [String] {
    get {return _storage._tags}
    set {_uniqueStorage()._tags = newValue}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "employed.io"

extension Employed_Io_JobSeeker: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".JobSeeker"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "user_id"),
    2: .standard(proto: "first_name"),
    3: .standard(proto: "last_name"),
    4: .same(proto: "email"),
    5: .standard(proto: "phone_number"),
    6: .same(proto: "bio"),
    7: .standard(proto: "avatar_url"),
    8: .same(proto: "headline"),
    9: .same(proto: "currentPosition"),
    10: .same(proto: "industry"),
    11: .same(proto: "location"),
    12: .same(proto: "skills"),
    13: .same(proto: "tags"),
  ]

  fileprivate class _StorageClass {
    var _userID: String = String()
    var _firstName: String = String()
    var _lastName: String = String()
    var _email: String = String()
    var _phoneNumber: String = String()
    var _bio: String = String()
    var _avatarURL: String = String()
    var _headline: String = String()
    var _currentPosition: String = String()
    var _industry: Employed_Io_Industry = .engineering
    var _location: Employed_Io_Location? = nil
    var _skills: [String] = []
    var _tags: [String] = []

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _userID = source._userID
      _firstName = source._firstName
      _lastName = source._lastName
      _email = source._email
      _phoneNumber = source._phoneNumber
      _bio = source._bio
      _avatarURL = source._avatarURL
      _headline = source._headline
      _currentPosition = source._currentPosition
      _industry = source._industry
      _location = source._location
      _skills = source._skills
      _tags = source._tags
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularStringField(value: &_storage._userID)
        case 2: try decoder.decodeSingularStringField(value: &_storage._firstName)
        case 3: try decoder.decodeSingularStringField(value: &_storage._lastName)
        case 4: try decoder.decodeSingularStringField(value: &_storage._email)
        case 5: try decoder.decodeSingularStringField(value: &_storage._phoneNumber)
        case 6: try decoder.decodeSingularStringField(value: &_storage._bio)
        case 7: try decoder.decodeSingularStringField(value: &_storage._avatarURL)
        case 8: try decoder.decodeSingularStringField(value: &_storage._headline)
        case 9: try decoder.decodeSingularStringField(value: &_storage._currentPosition)
        case 10: try decoder.decodeSingularEnumField(value: &_storage._industry)
        case 11: try decoder.decodeSingularMessageField(value: &_storage._location)
        case 12: try decoder.decodeRepeatedStringField(value: &_storage._skills)
        case 13: try decoder.decodeRepeatedStringField(value: &_storage._tags)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._userID.isEmpty {
        try visitor.visitSingularStringField(value: _storage._userID, fieldNumber: 1)
      }
      if !_storage._firstName.isEmpty {
        try visitor.visitSingularStringField(value: _storage._firstName, fieldNumber: 2)
      }
      if !_storage._lastName.isEmpty {
        try visitor.visitSingularStringField(value: _storage._lastName, fieldNumber: 3)
      }
      if !_storage._email.isEmpty {
        try visitor.visitSingularStringField(value: _storage._email, fieldNumber: 4)
      }
      if !_storage._phoneNumber.isEmpty {
        try visitor.visitSingularStringField(value: _storage._phoneNumber, fieldNumber: 5)
      }
      if !_storage._bio.isEmpty {
        try visitor.visitSingularStringField(value: _storage._bio, fieldNumber: 6)
      }
      if !_storage._avatarURL.isEmpty {
        try visitor.visitSingularStringField(value: _storage._avatarURL, fieldNumber: 7)
      }
      if !_storage._headline.isEmpty {
        try visitor.visitSingularStringField(value: _storage._headline, fieldNumber: 8)
      }
      if !_storage._currentPosition.isEmpty {
        try visitor.visitSingularStringField(value: _storage._currentPosition, fieldNumber: 9)
      }
      if _storage._industry != .engineering {
        try visitor.visitSingularEnumField(value: _storage._industry, fieldNumber: 10)
      }
      if let v = _storage._location {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 11)
      }
      if !_storage._skills.isEmpty {
        try visitor.visitRepeatedStringField(value: _storage._skills, fieldNumber: 12)
      }
      if !_storage._tags.isEmpty {
        try visitor.visitRepeatedStringField(value: _storage._tags, fieldNumber: 13)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Employed_Io_JobSeeker, rhs: Employed_Io_JobSeeker) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._userID != rhs_storage._userID {return false}
        if _storage._firstName != rhs_storage._firstName {return false}
        if _storage._lastName != rhs_storage._lastName {return false}
        if _storage._email != rhs_storage._email {return false}
        if _storage._phoneNumber != rhs_storage._phoneNumber {return false}
        if _storage._bio != rhs_storage._bio {return false}
        if _storage._avatarURL != rhs_storage._avatarURL {return false}
        if _storage._headline != rhs_storage._headline {return false}
        if _storage._currentPosition != rhs_storage._currentPosition {return false}
        if _storage._industry != rhs_storage._industry {return false}
        if _storage._location != rhs_storage._location {return false}
        if _storage._skills != rhs_storage._skills {return false}
        if _storage._tags != rhs_storage._tags {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
