// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: protocol/user/user.proto
//
// For information on using the generated types, please see the documenation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct Employed_Io_User {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var userID: String = String()

  var role: Employed_Io_User.Role = .jobSeeker

  var handle: String = String()

  var login: String = String()

  var password: String = String()

  var matches: [String] = []

  var pendingMatches: [String] = []

  var rejectedMatches: [String] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum Role: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case jobSeeker // = 0
    case recruiter // = 1
    case UNRECOGNIZED(Int)

    init() {
      self = .jobSeeker
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .jobSeeker
      case 1: self = .recruiter
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    var rawValue: Int {
      switch self {
      case .jobSeeker: return 0
      case .recruiter: return 1
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "employed.io"

extension Employed_Io_User: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".User"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "user_id"),
    2: .same(proto: "role"),
    3: .same(proto: "handle"),
    4: .same(proto: "login"),
    5: .same(proto: "password"),
    6: .same(proto: "matches"),
    7: .standard(proto: "pending_matches"),
    8: .standard(proto: "rejected_matches"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.userID)
      case 2: try decoder.decodeSingularEnumField(value: &self.role)
      case 3: try decoder.decodeSingularStringField(value: &self.handle)
      case 4: try decoder.decodeSingularStringField(value: &self.login)
      case 5: try decoder.decodeSingularStringField(value: &self.password)
      case 6: try decoder.decodeRepeatedStringField(value: &self.matches)
      case 7: try decoder.decodeRepeatedStringField(value: &self.pendingMatches)
      case 8: try decoder.decodeRepeatedStringField(value: &self.rejectedMatches)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.userID.isEmpty {
      try visitor.visitSingularStringField(value: self.userID, fieldNumber: 1)
    }
    if self.role != .jobSeeker {
      try visitor.visitSingularEnumField(value: self.role, fieldNumber: 2)
    }
    if !self.handle.isEmpty {
      try visitor.visitSingularStringField(value: self.handle, fieldNumber: 3)
    }
    if !self.login.isEmpty {
      try visitor.visitSingularStringField(value: self.login, fieldNumber: 4)
    }
    if !self.password.isEmpty {
      try visitor.visitSingularStringField(value: self.password, fieldNumber: 5)
    }
    if !self.matches.isEmpty {
      try visitor.visitRepeatedStringField(value: self.matches, fieldNumber: 6)
    }
    if !self.pendingMatches.isEmpty {
      try visitor.visitRepeatedStringField(value: self.pendingMatches, fieldNumber: 7)
    }
    if !self.rejectedMatches.isEmpty {
      try visitor.visitRepeatedStringField(value: self.rejectedMatches, fieldNumber: 8)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  func _protobuf_generated_isEqualTo(other: Employed_Io_User) -> Bool {
    if self.userID != other.userID {return false}
    if self.role != other.role {return false}
    if self.handle != other.handle {return false}
    if self.login != other.login {return false}
    if self.password != other.password {return false}
    if self.matches != other.matches {return false}
    if self.pendingMatches != other.pendingMatches {return false}
    if self.rejectedMatches != other.rejectedMatches {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Employed_Io_User.Role: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "JOB_SEEKER"),
    1: .same(proto: "RECRUITER"),
  ]
}
