// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: protocol/job/job.proto
//
// For information on using the generated types, please see the documenation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct Employed_Io_Job {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var jobID: String {
    get {return _storage._jobID}
    set {_uniqueStorage()._jobID = newValue}
  }

  var title: String {
    get {return _storage._title}
    set {_uniqueStorage()._title = newValue}
  }

  var description_p: String {
    get {return _storage._description_p}
    set {_uniqueStorage()._description_p = newValue}
  }

  var shortDescription: String {
    get {return _storage._shortDescription}
    set {_uniqueStorage()._shortDescription = newValue}
  }

  var company: Employed_Io_Company {
    get {return _storage._company ?? Employed_Io_Company()}
    set {_uniqueStorage()._company = newValue}
  }
  /// Returns true if `company` has been explicitly set.
  var hasCompany: Bool {return _storage._company != nil}
  /// Clears the value of `company`. Subsequent reads from it will return its default value.
  mutating func clearCompany() {_uniqueStorage()._company = nil}

  var recruiter: Employed_Io_Recruiter {
    get {return _storage._recruiter ?? Employed_Io_Recruiter()}
    set {_uniqueStorage()._recruiter = newValue}
  }
  /// Returns true if `recruiter` has been explicitly set.
  var hasRecruiter: Bool {return _storage._recruiter != nil}
  /// Clears the value of `recruiter`. Subsequent reads from it will return its default value.
  mutating func clearRecruiter() {_uniqueStorage()._recruiter = nil}

  var industry: Employed_Io_Industry {
    get {return _storage._industry}
    set {_uniqueStorage()._industry = newValue}
  }

  var employmentType: Employed_Io_Job.EmploymentType {
    get {return _storage._employmentType}
    set {_uniqueStorage()._employmentType = newValue}
  }

  var salaryType: OneOf_SalaryType? {
    get {return _storage._salaryType}
    set {_uniqueStorage()._salaryType = newValue}
  }

  var salary: Int32 {
    get {
      if case .salary(let v)? = _storage._salaryType {return v}
      return 0
    }
    set {_uniqueStorage()._salaryType = .salary(newValue)}
  }

  var salaryRange: Employed_Io_Job.SalaryRange {
    get {
      if case .salaryRange(let v)? = _storage._salaryType {return v}
      return Employed_Io_Job.SalaryRange()
    }
    set {_uniqueStorage()._salaryType = .salaryRange(newValue)}
  }

  var location: Employed_Io_Location {
    get {return _storage._location ?? Employed_Io_Location()}
    set {_uniqueStorage()._location = newValue}
  }
  /// Returns true if `location` has been explicitly set.
  var hasLocation: Bool {return _storage._location != nil}
  /// Clears the value of `location`. Subsequent reads from it will return its default value.
  mutating func clearLocation() {_uniqueStorage()._location = nil}

  var numberOfHires: Int32 {
    get {return _storage._numberOfHires}
    set {_uniqueStorage()._numberOfHires = newValue}
  }

  var requiredExperience: String {
    get {return _storage._requiredExperience}
    set {_uniqueStorage()._requiredExperience = newValue}
  }

  var preferredExperience: String {
    get {return _storage._preferredExperience}
    set {_uniqueStorage()._preferredExperience = newValue}
  }

  var skills: [String] {
    get {return _storage._skills}
    set {_uniqueStorage()._skills = newValue}
  }

  var responsibilities: String {
    get {return _storage._responsibilities}
    set {_uniqueStorage()._responsibilities = newValue}
  }

  var experience: Int32 {
    get {return _storage._experience}
    set {_uniqueStorage()._experience = newValue}
  }

  var educationLevel: [Employed_Io_Job.EducationLevel] {
    get {return _storage._educationLevel}
    set {_uniqueStorage()._educationLevel = newValue}
  }

  var tags: [String] {
    get {return _storage._tags}
    set {_uniqueStorage()._tags = newValue}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum OneOf_SalaryType: Equatable {
    case salary(Int32)
    case salaryRange(Employed_Io_Job.SalaryRange)

  #if !swift(>=4.1)
    static func ==(lhs: Employed_Io_Job.OneOf_SalaryType, rhs: Employed_Io_Job.OneOf_SalaryType) -> Bool {
      switch (lhs, rhs) {
      case (.salary(let l), .salary(let r)): return l == r
      case (.salaryRange(let l), .salaryRange(let r)): return l == r
      default: return false
      }
    }
  #endif
  }

  enum EmploymentType: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case fullTime // = 0
    case partTime // = 1
    case contract // = 2
    case internship // = 3
    case temporary // = 4
    case volunteer // = 5
    case UNRECOGNIZED(Int)

    init() {
      self = .fullTime
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .fullTime
      case 1: self = .partTime
      case 2: self = .contract
      case 3: self = .internship
      case 4: self = .temporary
      case 5: self = .volunteer
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    var rawValue: Int {
      switch self {
      case .fullTime: return 0
      case .partTime: return 1
      case .contract: return 2
      case .internship: return 3
      case .temporary: return 4
      case .volunteer: return 5
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  enum EducationLevel: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case highSchoolDiploma // = 0
    case associatesDegree // = 1
    case bachelorsDegree // = 2
    case mastersDegree // = 3
    case masterOfBusinessAdministration // = 4
    case doctorOfPhilosophy // = 5
    case doctorOfMedicine // = 6
    case doctorOfLaw // = 7
    case UNRECOGNIZED(Int)

    init() {
      self = .highSchoolDiploma
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .highSchoolDiploma
      case 1: self = .associatesDegree
      case 2: self = .bachelorsDegree
      case 3: self = .mastersDegree
      case 4: self = .masterOfBusinessAdministration
      case 5: self = .doctorOfPhilosophy
      case 6: self = .doctorOfMedicine
      case 7: self = .doctorOfLaw
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    var rawValue: Int {
      switch self {
      case .highSchoolDiploma: return 0
      case .associatesDegree: return 1
      case .bachelorsDegree: return 2
      case .mastersDegree: return 3
      case .masterOfBusinessAdministration: return 4
      case .doctorOfPhilosophy: return 5
      case .doctorOfMedicine: return 6
      case .doctorOfLaw: return 7
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  struct SalaryRange {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var minSalary: Int32 = 0

    var maxSalary: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}
  }

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

#if swift(>=4.2)

extension Employed_Io_Job.EmploymentType: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [Employed_Io_Job.EmploymentType] = [
    .fullTime,
    .partTime,
    .contract,
    .internship,
    .temporary,
    .volunteer,
  ]
}

extension Employed_Io_Job.EducationLevel: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [Employed_Io_Job.EducationLevel] = [
    .highSchoolDiploma,
    .associatesDegree,
    .bachelorsDegree,
    .mastersDegree,
    .masterOfBusinessAdministration,
    .doctorOfPhilosophy,
    .doctorOfMedicine,
    .doctorOfLaw,
  ]
}

#endif  // swift(>=4.2)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "employed.io"

extension Employed_Io_Job: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Job"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "job_id"),
    2: .same(proto: "title"),
    3: .same(proto: "description"),
    4: .standard(proto: "short_description"),
    5: .same(proto: "company"),
    6: .same(proto: "recruiter"),
    7: .same(proto: "industry"),
    8: .standard(proto: "employment_type"),
    9: .same(proto: "salary"),
    10: .standard(proto: "salary_range"),
    11: .same(proto: "location"),
    12: .standard(proto: "number_of_hires"),
    13: .standard(proto: "required_experience"),
    14: .standard(proto: "preferred_experience"),
    15: .same(proto: "skills"),
    16: .same(proto: "responsibilities"),
    17: .same(proto: "experience"),
    18: .standard(proto: "education_level"),
    19: .same(proto: "tags"),
  ]

  fileprivate class _StorageClass {
    var _jobID: String = String()
    var _title: String = String()
    var _description_p: String = String()
    var _shortDescription: String = String()
    var _company: Employed_Io_Company? = nil
    var _recruiter: Employed_Io_Recruiter? = nil
    var _industry: Employed_Io_Industry = .engineering
    var _employmentType: Employed_Io_Job.EmploymentType = .fullTime
    var _salaryType: Employed_Io_Job.OneOf_SalaryType?
    var _location: Employed_Io_Location? = nil
    var _numberOfHires: Int32 = 0
    var _requiredExperience: String = String()
    var _preferredExperience: String = String()
    var _skills: [String] = []
    var _responsibilities: String = String()
    var _experience: Int32 = 0
    var _educationLevel: [Employed_Io_Job.EducationLevel] = []
    var _tags: [String] = []

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _jobID = source._jobID
      _title = source._title
      _description_p = source._description_p
      _shortDescription = source._shortDescription
      _company = source._company
      _recruiter = source._recruiter
      _industry = source._industry
      _employmentType = source._employmentType
      _salaryType = source._salaryType
      _location = source._location
      _numberOfHires = source._numberOfHires
      _requiredExperience = source._requiredExperience
      _preferredExperience = source._preferredExperience
      _skills = source._skills
      _responsibilities = source._responsibilities
      _experience = source._experience
      _educationLevel = source._educationLevel
      _tags = source._tags
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularStringField(value: &_storage._jobID)
        case 2: try decoder.decodeSingularStringField(value: &_storage._title)
        case 3: try decoder.decodeSingularStringField(value: &_storage._description_p)
        case 4: try decoder.decodeSingularStringField(value: &_storage._shortDescription)
        case 5: try decoder.decodeSingularMessageField(value: &_storage._company)
        case 6: try decoder.decodeSingularMessageField(value: &_storage._recruiter)
        case 7: try decoder.decodeSingularEnumField(value: &_storage._industry)
        case 8: try decoder.decodeSingularEnumField(value: &_storage._employmentType)
        case 9:
          if _storage._salaryType != nil {try decoder.handleConflictingOneOf()}
          var v: Int32?
          try decoder.decodeSingularInt32Field(value: &v)
          if let v = v {_storage._salaryType = .salary(v)}
        case 10:
          var v: Employed_Io_Job.SalaryRange?
          if let current = _storage._salaryType {
            try decoder.handleConflictingOneOf()
            if case .salaryRange(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._salaryType = .salaryRange(v)}
        case 11: try decoder.decodeSingularMessageField(value: &_storage._location)
        case 12: try decoder.decodeSingularInt32Field(value: &_storage._numberOfHires)
        case 13: try decoder.decodeSingularStringField(value: &_storage._requiredExperience)
        case 14: try decoder.decodeSingularStringField(value: &_storage._preferredExperience)
        case 15: try decoder.decodeRepeatedStringField(value: &_storage._skills)
        case 16: try decoder.decodeSingularStringField(value: &_storage._responsibilities)
        case 17: try decoder.decodeSingularInt32Field(value: &_storage._experience)
        case 18: try decoder.decodeRepeatedEnumField(value: &_storage._educationLevel)
        case 19: try decoder.decodeRepeatedStringField(value: &_storage._tags)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._jobID.isEmpty {
        try visitor.visitSingularStringField(value: _storage._jobID, fieldNumber: 1)
      }
      if !_storage._title.isEmpty {
        try visitor.visitSingularStringField(value: _storage._title, fieldNumber: 2)
      }
      if !_storage._description_p.isEmpty {
        try visitor.visitSingularStringField(value: _storage._description_p, fieldNumber: 3)
      }
      if !_storage._shortDescription.isEmpty {
        try visitor.visitSingularStringField(value: _storage._shortDescription, fieldNumber: 4)
      }
      if let v = _storage._company {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
      }
      if let v = _storage._recruiter {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
      }
      if _storage._industry != .engineering {
        try visitor.visitSingularEnumField(value: _storage._industry, fieldNumber: 7)
      }
      if _storage._employmentType != .fullTime {
        try visitor.visitSingularEnumField(value: _storage._employmentType, fieldNumber: 8)
      }
      switch _storage._salaryType {
      case .salary(let v)?:
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 9)
      case .salaryRange(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 10)
      case nil: break
      }
      if let v = _storage._location {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 11)
      }
      if _storage._numberOfHires != 0 {
        try visitor.visitSingularInt32Field(value: _storage._numberOfHires, fieldNumber: 12)
      }
      if !_storage._requiredExperience.isEmpty {
        try visitor.visitSingularStringField(value: _storage._requiredExperience, fieldNumber: 13)
      }
      if !_storage._preferredExperience.isEmpty {
        try visitor.visitSingularStringField(value: _storage._preferredExperience, fieldNumber: 14)
      }
      if !_storage._skills.isEmpty {
        try visitor.visitRepeatedStringField(value: _storage._skills, fieldNumber: 15)
      }
      if !_storage._responsibilities.isEmpty {
        try visitor.visitSingularStringField(value: _storage._responsibilities, fieldNumber: 16)
      }
      if _storage._experience != 0 {
        try visitor.visitSingularInt32Field(value: _storage._experience, fieldNumber: 17)
      }
      if !_storage._educationLevel.isEmpty {
        try visitor.visitPackedEnumField(value: _storage._educationLevel, fieldNumber: 18)
      }
      if !_storage._tags.isEmpty {
        try visitor.visitRepeatedStringField(value: _storage._tags, fieldNumber: 19)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Employed_Io_Job, rhs: Employed_Io_Job) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._jobID != rhs_storage._jobID {return false}
        if _storage._title != rhs_storage._title {return false}
        if _storage._description_p != rhs_storage._description_p {return false}
        if _storage._shortDescription != rhs_storage._shortDescription {return false}
        if _storage._company != rhs_storage._company {return false}
        if _storage._recruiter != rhs_storage._recruiter {return false}
        if _storage._industry != rhs_storage._industry {return false}
        if _storage._employmentType != rhs_storage._employmentType {return false}
        if _storage._salaryType != rhs_storage._salaryType {return false}
        if _storage._location != rhs_storage._location {return false}
        if _storage._numberOfHires != rhs_storage._numberOfHires {return false}
        if _storage._requiredExperience != rhs_storage._requiredExperience {return false}
        if _storage._preferredExperience != rhs_storage._preferredExperience {return false}
        if _storage._skills != rhs_storage._skills {return false}
        if _storage._responsibilities != rhs_storage._responsibilities {return false}
        if _storage._experience != rhs_storage._experience {return false}
        if _storage._educationLevel != rhs_storage._educationLevel {return false}
        if _storage._tags != rhs_storage._tags {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Employed_Io_Job.EmploymentType: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "FULL_TIME"),
    1: .same(proto: "PART_TIME"),
    2: .same(proto: "CONTRACT"),
    3: .same(proto: "INTERNSHIP"),
    4: .same(proto: "TEMPORARY"),
    5: .same(proto: "VOLUNTEER"),
  ]
}

extension Employed_Io_Job.EducationLevel: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "HIGH_SCHOOL_DIPLOMA"),
    1: .same(proto: "ASSOCIATES_DEGREE"),
    2: .same(proto: "BACHELORS_DEGREE"),
    3: .same(proto: "MASTERS_DEGREE"),
    4: .same(proto: "MASTER_OF_BUSINESS_ADMINISTRATION"),
    5: .same(proto: "DOCTOR_OF_PHILOSOPHY"),
    6: .same(proto: "DOCTOR_OF_MEDICINE"),
    7: .same(proto: "DOCTOR_OF_LAW"),
  ]
}

extension Employed_Io_Job.SalaryRange: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Employed_Io_Job.protoMessageName + ".SalaryRange"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "min_salary"),
    2: .standard(proto: "max_salary"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self.minSalary)
      case 2: try decoder.decodeSingularInt32Field(value: &self.maxSalary)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.minSalary != 0 {
      try visitor.visitSingularInt32Field(value: self.minSalary, fieldNumber: 1)
    }
    if self.maxSalary != 0 {
      try visitor.visitSingularInt32Field(value: self.maxSalary, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Employed_Io_Job.SalaryRange, rhs: Employed_Io_Job.SalaryRange) -> Bool {
    if lhs.minSalary != rhs.minSalary {return false}
    if lhs.maxSalary != rhs.maxSalary {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
