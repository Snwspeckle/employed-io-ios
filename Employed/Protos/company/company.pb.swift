// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: protocol/company/company.proto
//
// For information on using the generated types, please see the documenation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct Employed_Io_Company {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var companyID: String {
    get {return _storage._companyID}
    set {_uniqueStorage()._companyID = newValue}
  }

  var name: String {
    get {return _storage._name}
    set {_uniqueStorage()._name = newValue}
  }

  var about: String {
    get {return _storage._about}
    set {_uniqueStorage()._about = newValue}
  }

  var avatarURL: String {
    get {return _storage._avatarURL}
    set {_uniqueStorage()._avatarURL = newValue}
  }

  var website: String {
    get {return _storage._website}
    set {_uniqueStorage()._website = newValue}
  }

  var headquarters: Employed_Io_Location {
    get {return _storage._headquarters ?? Employed_Io_Location()}
    set {_uniqueStorage()._headquarters = newValue}
  }
  /// Returns true if `headquarters` has been explicitly set.
  var hasHeadquarters: Bool {return _storage._headquarters != nil}
  /// Clears the value of `headquarters`. Subsequent reads from it will return its default value.
  mutating func clearHeadquarters() {_storage._headquarters = nil}

  var foundedYear: Int32 {
    get {return _storage._foundedYear}
    set {_uniqueStorage()._foundedYear = newValue}
  }

  var size: Int32 {
    get {return _storage._size}
    set {_uniqueStorage()._size = newValue}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "employed.io"

extension Employed_Io_Company: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Company"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "company_id"),
    2: .same(proto: "name"),
    3: .same(proto: "about"),
    4: .standard(proto: "avatar_url"),
    5: .same(proto: "website"),
    6: .same(proto: "headquarters"),
    7: .standard(proto: "founded_year"),
    8: .same(proto: "size"),
  ]

  fileprivate class _StorageClass {
    var _companyID: String = String()
    var _name: String = String()
    var _about: String = String()
    var _avatarURL: String = String()
    var _website: String = String()
    var _headquarters: Employed_Io_Location? = nil
    var _foundedYear: Int32 = 0
    var _size: Int32 = 0

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _companyID = source._companyID
      _name = source._name
      _about = source._about
      _avatarURL = source._avatarURL
      _website = source._website
      _headquarters = source._headquarters
      _foundedYear = source._foundedYear
      _size = source._size
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularStringField(value: &_storage._companyID)
        case 2: try decoder.decodeSingularStringField(value: &_storage._name)
        case 3: try decoder.decodeSingularStringField(value: &_storage._about)
        case 4: try decoder.decodeSingularStringField(value: &_storage._avatarURL)
        case 5: try decoder.decodeSingularStringField(value: &_storage._website)
        case 6: try decoder.decodeSingularMessageField(value: &_storage._headquarters)
        case 7: try decoder.decodeSingularInt32Field(value: &_storage._foundedYear)
        case 8: try decoder.decodeSingularInt32Field(value: &_storage._size)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._companyID.isEmpty {
        try visitor.visitSingularStringField(value: _storage._companyID, fieldNumber: 1)
      }
      if !_storage._name.isEmpty {
        try visitor.visitSingularStringField(value: _storage._name, fieldNumber: 2)
      }
      if !_storage._about.isEmpty {
        try visitor.visitSingularStringField(value: _storage._about, fieldNumber: 3)
      }
      if !_storage._avatarURL.isEmpty {
        try visitor.visitSingularStringField(value: _storage._avatarURL, fieldNumber: 4)
      }
      if !_storage._website.isEmpty {
        try visitor.visitSingularStringField(value: _storage._website, fieldNumber: 5)
      }
      if let v = _storage._headquarters {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
      }
      if _storage._foundedYear != 0 {
        try visitor.visitSingularInt32Field(value: _storage._foundedYear, fieldNumber: 7)
      }
      if _storage._size != 0 {
        try visitor.visitSingularInt32Field(value: _storage._size, fieldNumber: 8)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  func _protobuf_generated_isEqualTo(other: Employed_Io_Company) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let other_storage = _args.1
        if _storage._companyID != other_storage._companyID {return false}
        if _storage._name != other_storage._name {return false}
        if _storage._about != other_storage._about {return false}
        if _storage._avatarURL != other_storage._avatarURL {return false}
        if _storage._website != other_storage._website {return false}
        if _storage._headquarters != other_storage._headquarters {return false}
        if _storage._foundedYear != other_storage._foundedYear {return false}
        if _storage._size != other_storage._size {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}
