// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: protocol/user/user_request.proto
//
// For information on using the generated types, please see the documenation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct Employed_Io_CreateUserRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var user: Employed_Io_User {
    get {return _storage._user ?? Employed_Io_User()}
    set {_uniqueStorage()._user = newValue}
  }
  /// Returns true if `user` has been explicitly set.
  var hasUser: Bool {return _storage._user != nil}
  /// Clears the value of `user`. Subsequent reads from it will return its default value.
  mutating func clearUser() {_storage._user = nil}

  var userType: OneOf_UserType? {
    get {return _storage._userType}
    set {_uniqueStorage()._userType = newValue}
  }

  var jobSeeker: Employed_Io_JobSeeker {
    get {
      if case .jobSeeker(let v)? = _storage._userType {return v}
      return Employed_Io_JobSeeker()
    }
    set {_uniqueStorage()._userType = .jobSeeker(newValue)}
  }

  var recruiter: Employed_Io_Recruiter {
    get {
      if case .recruiter(let v)? = _storage._userType {return v}
      return Employed_Io_Recruiter()
    }
    set {_uniqueStorage()._userType = .recruiter(newValue)}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum OneOf_UserType: Equatable {
    case jobSeeker(Employed_Io_JobSeeker)
    case recruiter(Employed_Io_Recruiter)

    static func ==(lhs: Employed_Io_CreateUserRequest.OneOf_UserType, rhs: Employed_Io_CreateUserRequest.OneOf_UserType) -> Bool {
      switch (lhs, rhs) {
      case (.jobSeeker(let l), .jobSeeker(let r)): return l == r
      case (.recruiter(let l), .recruiter(let r)): return l == r
      default: return false
      }
    }
  }

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct Employed_Io_CreateUserResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var status: Employed_Io_Status {
    get {return _storage._status}
    set {_uniqueStorage()._status = newValue}
  }

  var user: Employed_Io_User {
    get {return _storage._user ?? Employed_Io_User()}
    set {_uniqueStorage()._user = newValue}
  }
  /// Returns true if `user` has been explicitly set.
  var hasUser: Bool {return _storage._user != nil}
  /// Clears the value of `user`. Subsequent reads from it will return its default value.
  mutating func clearUser() {_storage._user = nil}

  var userType: OneOf_UserType? {
    get {return _storage._userType}
    set {_uniqueStorage()._userType = newValue}
  }

  var jobSeeker: Employed_Io_JobSeeker {
    get {
      if case .jobSeeker(let v)? = _storage._userType {return v}
      return Employed_Io_JobSeeker()
    }
    set {_uniqueStorage()._userType = .jobSeeker(newValue)}
  }

  var recruiter: Employed_Io_Recruiter {
    get {
      if case .recruiter(let v)? = _storage._userType {return v}
      return Employed_Io_Recruiter()
    }
    set {_uniqueStorage()._userType = .recruiter(newValue)}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum OneOf_UserType: Equatable {
    case jobSeeker(Employed_Io_JobSeeker)
    case recruiter(Employed_Io_Recruiter)

    static func ==(lhs: Employed_Io_CreateUserResponse.OneOf_UserType, rhs: Employed_Io_CreateUserResponse.OneOf_UserType) -> Bool {
      switch (lhs, rhs) {
      case (.jobSeeker(let l), .jobSeeker(let r)): return l == r
      case (.recruiter(let l), .recruiter(let r)): return l == r
      default: return false
      }
    }
  }

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct Employed_Io_UsersResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var users: [Employed_Io_User] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "employed.io"

extension Employed_Io_CreateUserRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".CreateUserRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "user"),
    2: .standard(proto: "job_seeker"),
    3: .same(proto: "recruiter"),
  ]

  fileprivate class _StorageClass {
    var _user: Employed_Io_User? = nil
    var _userType: Employed_Io_CreateUserRequest.OneOf_UserType?

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _user = source._user
      _userType = source._userType
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._user)
        case 2:
          var v: Employed_Io_JobSeeker?
          if let current = _storage._userType {
            try decoder.handleConflictingOneOf()
            if case .jobSeeker(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._userType = .jobSeeker(v)}
        case 3:
          var v: Employed_Io_Recruiter?
          if let current = _storage._userType {
            try decoder.handleConflictingOneOf()
            if case .recruiter(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._userType = .recruiter(v)}
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._user {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      switch _storage._userType {
      case .jobSeeker(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      case .recruiter(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      case nil: break
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  func _protobuf_generated_isEqualTo(other: Employed_Io_CreateUserRequest) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let other_storage = _args.1
        if _storage._user != other_storage._user {return false}
        if _storage._userType != other_storage._userType {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Employed_Io_CreateUserResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".CreateUserResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
    2: .same(proto: "user"),
    3: .standard(proto: "job_seeker"),
    4: .same(proto: "recruiter"),
  ]

  fileprivate class _StorageClass {
    var _status: Employed_Io_Status = .failure
    var _user: Employed_Io_User? = nil
    var _userType: Employed_Io_CreateUserResponse.OneOf_UserType?

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _status = source._status
      _user = source._user
      _userType = source._userType
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularEnumField(value: &_storage._status)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._user)
        case 3:
          var v: Employed_Io_JobSeeker?
          if let current = _storage._userType {
            try decoder.handleConflictingOneOf()
            if case .jobSeeker(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._userType = .jobSeeker(v)}
        case 4:
          var v: Employed_Io_Recruiter?
          if let current = _storage._userType {
            try decoder.handleConflictingOneOf()
            if case .recruiter(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._userType = .recruiter(v)}
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._status != .failure {
        try visitor.visitSingularEnumField(value: _storage._status, fieldNumber: 1)
      }
      if let v = _storage._user {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
      switch _storage._userType {
      case .jobSeeker(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      case .recruiter(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      case nil: break
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  func _protobuf_generated_isEqualTo(other: Employed_Io_CreateUserResponse) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let other_storage = _args.1
        if _storage._status != other_storage._status {return false}
        if _storage._user != other_storage._user {return false}
        if _storage._userType != other_storage._userType {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Employed_Io_UsersResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".UsersResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "users"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.users)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.users.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.users, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  func _protobuf_generated_isEqualTo(other: Employed_Io_UsersResponse) -> Bool {
    if self.users != other.users {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}
